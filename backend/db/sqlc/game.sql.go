// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: game.sql

package sqlc

import (
	"context"
	"time"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (game_id, picks)
VALUES (?, ?)
`

type CreateGameParams struct {
	GameID int64  `json:"game_id"`
	Picks  string `json:"picks"`
}

func (q *Queries) CreateGame(ctx context.Context, arg *CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame, arg.GameID, arg.Picks)
	return err
}

const getGameByGameID = `-- name: GetGameByGameID :one
SELECT game_id, picks, created_at
FROM games
WHERE game_id = ?
`

type GetGameByGameIDRow struct {
	GameID    int64      `json:"game_id"`
	Picks     string     `json:"picks"`
	CreatedAt *time.Time `json:"created_at"`
}

func (q *Queries) GetGameByGameID(ctx context.Context, gameID int64) (*GetGameByGameIDRow, error) {
	row := q.db.QueryRowContext(ctx, getGameByGameID, gameID)
	var i GetGameByGameIDRow
	err := row.Scan(&i.GameID, &i.Picks, &i.CreatedAt)
	return &i, err
}

const getLastGameID = `-- name: GetLastGameID :one
SELECT COALESCE(MAX(game_id), 0) + 0 AS last_game_id
FROM games
`

func (q *Queries) GetLastGameID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastGameID)
	var last_game_id int64
	err := row.Scan(&last_game_id)
	return last_game_id, err
}
